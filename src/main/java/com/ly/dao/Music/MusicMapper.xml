<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
 namespace：必须有值，自定义的唯一字符串
 推荐使用：dao 接口的全限定名称
-->
<mapper namespace="com.ly.dao.Music.MusicMapper">
    <!--
    <select>: 查询数据， 标签中必须是 select 语句
    id: sql 语句的自定义名称，推荐使用 dao 接口中方法名称，也就是StudentDao接口
    使用名称表示要执行的 sql 语句
    resultType: 查询语句的返回结果数据类型，使用全限定类名,这里填domain中的Student实体类的reference
    -->
    <!--查询所有音乐-->
    <select id="allmusic" resultType="com.ly.pojo.Music">
        <!--要执行的 sql 语句-->
        select * from music
    </select>
    <!--查询所有OP-->
    <select id="selectOP" resultType="com.ly.pojo.Music">
        <!--要执行的 sql 语句-->
        select * from music
        <where>
            musicBelong="OP"
        </where>
    </select>
    <!--查询所有ED-->
    <select id="selectED" resultType="com.ly.pojo.Music">
        <!--要执行的 sql 语句-->
        select * from music
        <where>
            musicBelong="ED"
        </where>
    </select>
    <!--更新时点击该音乐的修改，根据该音乐的id去查找信息-->
    <select id="querymusicById" resultType="com.ly.pojo.Music">
        <!--要执行的 sql 语句-->
        select * from music
        <where>
            musicId = #{musicId}
        </where>
    </select>
    <!--新增音乐-->
    <insert id="addmusic" parameterType="com.ly.pojo.Music">
        insert into music(musicName,musicLink,musicBelong,musicResource)
        values (#{musicName}, #{musicLink},#{musicBelong}, #{musicResource})
    </insert>
    <!--修改音乐-->
    <update id="updatemusic" parameterType="com.ly.pojo.Music">
        update music
        set musicName = #{musicName},musicLink = #{musicLink},musicBelong = #{musicBelong},
            musicResource = #{musicResource}
        where musicId = #{musicId}
    </update>
    <!--删除音乐-->
    <delete id="deletemusicById" parameterType="int">
        delete
        from music
        where musicId = #{musicId}
    </delete>
</mapper>
